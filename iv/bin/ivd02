#!/bin/sh

# the next line restarts using wish \
exec wish "$0" "$@"

# LD_LIBRARY_PATH=$LD_LIBRARY_PATH":"/opt/NICgpib/lib ; export LD_LIBRARY_PATH ; exec wish "$0" "$@"

if {[info tclversion] < 8.6} {
    # error "Version ([info tclversion]) should be >= 8.4(64 bits integers)"
    error "Version ([info tclversion]) should be >= 8.6 (unlimited integers)"
}

#
# package require hyperhelp 1.2.999
# set jstools_library /prog/Tcl/lib/jstools-4.5
# lappend auto_path $jstools_library

# puts stderr $env(LD_LIBRARY_PATH)

set tcl_traceExec 0
set tcl_traceCompile 0

proc sourceCode {dir file} {
    puts "sourceCode EST OBSOLETE, utiliser \"package\""
    puts "### $file"
    source $dir/library/$file
}

puts "conflit voir superTable (opt) et aide"
package require fidev
package require superTable
package require aide
package require minihelp
package require l2mGraph 1.1

set AsdexTclDir $FIDEV_TCL_ROOT
cd $AsdexTclDir

package require gpibLowLevel
package require gpib

sourceCode mesures temperat.iv.tcl
sourceCode mesures ressmu.iv.tcl
sourceCode mesures ecom.1.0.tcl

set JceMaxRaisonnable 2e-3 ;# A*um-2
set JbDirMaxRaisonnable [expr {0.1 * $JceMaxRaisonnable}]
puts "JceMaxRaisonnable = $JceMaxRaisonnable"
# package require mes_bipolaire

sourceCode mesures logsmu.iv.tcl
# 2004-02-03 sourceCode mesures diode.tcl
sourceCode mesures gtlm.iv.tcl
sourceCode mesures tri.tcl
sourceCode mesures ibic.tcl
sourceCode masque xy.tcl
#sourceCode masque symdes.tcl
#sourceCode masque geom2d.tcl
package require masque
package require tbs2
#sourceCode masque tbs2.tcl
sourceCode iv asyst.tcl
sourceCode iv tc.tcl

sourceCode iv sauve.iv.tcl
package require iv_ui 2.2
sourceCode iv foreach.tcl
# sourceCode iv DIVERS.tcl

puts "ALL IS SOURCED"

proc iv:quit {w} {
    set answer [tk_messageBox -default ok -message "OK to quit ?" -type okcancel  -icon question]
    case $answer {
        ok exit
        cancel {tk_messageBox -message "Vous avez bien raison !" -type ok}
    }
}

# devrait se trouver ailleurs
namespace eval mes {}
proc mes::copyParams {&from &to} {
    upvar ${&from} from
    upvar ${&to} to
    foreach key [array names from] {\
	set to($key) $from($key)
    }
}

proc mes::destroyParams {&from} {
    upvar \#0 ${&from} from
    foreach key [array names from] {
	unset from($key)
    }
}


proc iv:read.def {} {
    global ASDEXDATA gloglo
    iniGlobals
    # if {[info exists gloglo]} {unset gloglo}
    source iv_valeursParDefaut/library/$ASDEXDATA(typMes).def.tcl
}


puts [clock format [clock seconds]]

